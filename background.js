function getTotalHoursInMount(m) {
    let now_day = new Date().getDate()
    let now_month = new Date().getMonth()

    let month = data[m]
    let total_hours = 0
    for (let i=0; i < month.length; i ++) {
        let [type_day, week_day, day, hours] = month[i]
        total_hours += hours
        if (day === now_day && now_month === m) {break}
    }

    return total_hours
}

function get_month(doc) {
    // let date = doc.getElementsByClassName('timeman-navigation-previous')[0].attributes['data-start-to'].textContent\
    let date = doc.getElementsByClassName('timeman-top-title')[0].childNodes[1].attributes['value'].textContent
    return  date.split(".")[1] * 1 - 1
}

function set_css_hover(doc, name_tag) {
    let new_element = doc.createElement('style')
    new_element.className = name_tag
    let textNode = doc.createTextNode("span #my_time:hover:before {\n" +
        "    content: attr(data-tooltip);\n" +
        "    position: absolute;\n" +
        "    width: 60px;\n" +
        "    color: black;\n" +
        "    background: #ECF5FCFF;\n" +
        "    border-radius: 4px;\n" +
        "}")
    new_element.appendChild(textNode)
    let parent = doc.getElementsByTagName('head')[0]
    let child =parent.childNodes[1]
    new_element.appendChild(textNode)

    if (doc.getElementsByClassName(name_tag).length < 1) {parent.insertBefore(new_element, child)}
}

function main() {
    let mouth;
    let new_elem_title;
    let new_elen_hours;
    let elem_time;

    try {
        let element = document.getElementsByClassName('side-panel-iframe')[1]
        if (element) {
            let doc = element.contentDocument
            mouth = get_month(doc)
            new_elem_title = doc.getElementsByClassName("main-grid-head-title main-grid-head-title-without-transform")[6]
            new_elen_hours = doc.getElementsByClassName("timeman-grid-stat")[4]
            elem_time = doc.getElementsByClassName('timeman-grid-stat')[2]
            set_css_hover(doc, 'my_style_2')
        }
        else {
            mouth = get_month(document)
            new_elem_title = document.getElementsByClassName("main-grid-head-title main-grid-head-title-without-transform")[6]
            new_elen_hours = document.getElementsByClassName("timeman-grid-stat")[4]
            elem_time = document.getElementsByClassName('timeman-grid-stat')[2]
            set_css_hover(document, 'my_style_1')
        }

        let totalHours = getTotalHoursInMount(mouth)
        let totalHours_lst = time_10_to_60(totalHours)
        let text = totalHours_lst[1] + 'ч ' + totalHours_lst[2] + 'м'
        let time = elem_time.textContent.split(' ')
        let h = time[0].replace(/[^0-9]/g,"")
        let m = time[1].replace(/[^0-9]/g,"")

        new_elem_title.textContent = 'Мои часы'
        new_elen_hours.textContent = text

        let diff = time_10_to_60(totalHours - time_60_to_10(h, m))
        new_elen_hours.setAttribute('data-tooltip', diff[0] + diff[1] + 'ч ' + diff[2] + 'м')
        new_elen_hours.setAttribute('id', 'my_time')
    }
    catch (err) {}
}

function time_10_to_60(time) {
    // Перевод времени: 2.5 -> [2, 30]
    let k = (time > 0) ? 1 : -1
    time = time * k
    let hours = Math.floor(time)
    let minutes = Math.round((time - hours) * 60)
    return [(k < 0) ? '-' : '' , hours, minutes]
}
function time_60_to_10(h, m) {
    return Number(h) + Number(m)/60
}

let production_calendar_2023 = {"10": [[1, "Ср", 1, 8.5], [1, "Чт", 2, 8.5], [1, "Пт", 3, 7.0], [0, "Сб", 4, 0], [0, "Вс", 5, 0], [0, "Пн", 6, 0], [1, "Вт", 7, 8.5], [1, "Ср", 8, 8.5], [1, "Чт", 9, 8.5], [1, "Пт", 10, 8.0], [0, "Сб", 11, 0], [0, "Вс", 12, 0], [1, "Пн", 13, 8.5], [1, "Вт", 14, 8.5], [1, "Ср", 15, 8.5], [1, "Чт", 16, 8.5], [1, "Пт", 17, 8.0], [0, "Сб", 18, 0], [0, "Вс", 19, 0], [1, "Пн", 20, 8.5], [1, "Вт", 21, 8.5], [1, "Ср", 22, 8.5], [1, "Чт", 23, 8.5], [1, "Пт", 24, 8.0], [0, "Сб", 25, 0], [0, "Вс", 26, 0], [1, "Пн", 27, 8.5], [1, "Вт", 28, 8.5], [1, "Ср", 29, 8.5], [1, "Чт", 30, 8.5]], "11": [[1, "Пт", 1, 8.0], [0, "Сб", 2, 0], [0, "Вс", 3, 0], [1, "Пн", 4, 8.5], [1, "Вт", 5, 8.5], [1, "Ср", 6, 8.5], [1, "Чт", 7, 8.5], [1, "Пт", 8, 8.0], [0, "Сб", 9, 0], [0, "Вс", 10, 0], [1, "Пн", 11, 8.5], [1, "Вт", 12, 8.5], [1, "Ср", 13, 8.5], [1, "Чт", 14, 8.5], [1, "Пт", 15, 8.0], [0, "Сб", 16, 0], [0, "Вс", 17, 0], [1, "Пн", 18, 8.5], [1, "Вт", 19, 8.5], [1, "Ср", 20, 8.5], [1, "Чт", 21, 8.5], [1, "Пт", 22, 8.0], [0, "Сб", 23, 0], [0, "Вс", 24, 0], [1, "Пн", 25, 8.5], [1, "Вт", 26, 8.5], [1, "Ср", 27, 8.5], [1, "Чт", 28, 8.5], [1, "Пт", 29, 8.0], [0, "Сб", 30, 0], [0, "Вс", 31, 0]]}
let production_calendar_2024 = {"0": [[0, "Пн", 1.0, 0], [0, "Вт", 2.0, 0], [0, "Ср", 3.0, 0], [0, "Чт", 4.0, 0], [0, "Пт", 5.0, 0], [0, "Сб", 6.0, 0], [0, "Вс", 7.0, 0], [0, "Пн", 8.0, 0], [1, "Вт", 9.0, 8.5], [1, "Ср", 10.0, 8.5], [1, "Чт", 11.0, 8.5], [1, "Пт", 12.0, 8.5], [0, "Сб", 13.0, 0], [0, "Вс", 14.0, 0], [1, "Пн", 15.0, 8.5], [1, "Вт", 16.0, 8.5], [1, "Ср", 17.0, 8.5], [1, "Чт", 18.0, 8.5], [1, "Пт", 19.0, 8.5], [0, "Сб", 20.0, 0], [0, "Вс", 21.0, 0], [1, "Пн", 22.0, 8.5], [1, "Вт", 23.0, 8.5], [1, "Ср", 24.0, 8.5], [1, "Чт", 25.0, 8.5], [1, "Пт", 26.0, 8.5], [0, "Сб", 27.0, 0], [0, "Вс", 28.0, 0], [1, "Пн", 29.0, 8.5], [1, "Вт", 30.0, 8.5], [1, "Ср", 31.0, 8.5]], "1": [[1, "Чт", 1.0, 8.5], [1, "Пт", 2.0, 8.5], [0, "Сб", 3.0, 0], [0, "Вс", 4.0, 0], [1, "Пн", 5.0, 8.5], [1, "Вт", 6.0, 8.5], [1, "Ср", 7.0, 8.5], [1, "Чт", 8.0, 8.5], [1, "Пт", 9.0, 8.5], [0, "Сб", 10.0, 0], [0, "Вс", 11.0, 0], [1, "Пн", 12.0, 8.5], [1, "Вт", 13.0, 8.5], [1, "Ср", 14.0, 8.5], [1, "Чт", 15.0, 8.5], [1, "Пт", 16.0, 8.5], [0, "Сб", 17.0, 0], [0, "Вс", 18.0, 0], [1, "Пн", 19.0, 8.5], [1, "Вт", 20.0, 8.5], [1, "Ср", 21.0, 8.5], [1, "Чт", 22.0, 8.5], [0, "Пт", 23.0, 0], [0, "Сб", 24.0, 0], [0, "Вс", 25.0, 0], [1, "Пн", 26.0, 8.5], [1, "Вт", 27.0, 8.5], [1, "Ср", 28.0, 8.5], [1, "Чт", 29.0, 8.5]], "2": [[1, "Пт", 1.0, 8.5], [0, "Сб", 2.0, 0], [0, "Вс", 3.0, 0], [1, "Пн", 4.0, 8.5], [1, "Вт", 5.0, 8.5], [1, "Ср", 6.0, 8.5], [1, "Чт", 7.0, 8.5], [0, "Пт", 8.0, 0], [0, "Сб", 9.0, 0], [0, "Вс", 10.0, 0], [1, "Пн", 11.0, 8.5], [1, "Вт", 12.0, 8.5], [1, "Ср", 13.0, 8.5], [1, "Чт", 14.0, 8.5], [1, "Пт", 15.0, 8.5], [0, "Сб", 16.0, 0], [0, "Вс", 17.0, 0], [1, "Пн", 18.0, 8.5], [1, "Вт", 19.0, 8.5], [1, "Ср", 20.0, 8.5], [1, "Чт", 21.0, 8.5], [1, "Пт", 22.0, 8.5], [0, "Сб", 23.0, 0], [0, "Вс", 24.0, 0], [1, "Пн", 25.0, 8.5], [1, "Вт", 26.0, 8.5], [1, "Ср", 27.0, 8.5], [1, "Чт", 28.0, 8.5], [1, "Пт", 29.0, 8.5], [0, "Сб", 30.0, 0], [0, "Вс", 31.0, 0]], "3": [[1, "Пн", 1.0, 8.5], [1, "Вт", 2.0, 8.5], [1, "Ср", 3.0, 8.5], [1, "Чт", 4.0, 8.5], [1, "Пт", 5.0, 8.5], [0, "Сб", 6.0, 0], [0, "Вс", 7.0, 0], [1, "Пн", 8.0, 8.5], [1, "Вт", 9.0, 8.5], [1, "Ср", 10.0, 8.5], [1, "Чт", 11.0, 8.5], [1, "Пт", 12.0, 8.5], [0, "Сб", 13.0, 0], [0, "Вс", 14.0, 0], [1, "Пн", 15.0, 8.5], [1, "Вт", 16.0, 8.5], [1, "Ср", 17.0, 8.5], [1, "Чт", 18.0, 8.5], [1, "Пт", 19.0, 8.5], [0, "Сб", 20.0, 0], [0, "Вс", 21.0, 0], [1, "Пн", 22.0, 8.5], [1, "Вт", 23.0, 8.5], [1, "Ср", 24.0, 8.5], [1, "Чт", 25.0, 8.5], [1, "Пт", 26.0, 8.5], [1, "Сб", 27.0, 8.5], [0, "Вс", 28.0, 0], [0, "Пн", 29.0, 0], [0, "Вт", 30.0, 0]], "4": [[0, "Ср", 1.0, 0], [1, "Чт", 2.0, 8.5], [1, "Пт", 3.0, 8.5], [0, "Сб", 4.0, 0], [0, "Вс", 5.0, 0], [1, "Пн", 6.0, 8.5], [1, "Вт", 7.0, 8.5], [1, "Ср", 8.0, 8.5], [0, "Чт", 9.0, 0], [0, "Пт", 10.0, 0], [0, "Сб", 11.0, 0], [0, "Вс", 12.0, 0], [1, "Пн", 13.0, 8.5], [1, "Вт", 14.0, 8.5], [1, "Ср", 15.0, 8.5], [1, "Чт", 16.0, 8.5], [1, "Пт", 17.0, 8.5], [0, "Сб", 18.0, 0], [0, "Вс", 19.0, 0], [1, "Пн", 20.0, 8.5], [1, "Вт", 21.0, 8.5], [1, "Ср", 22.0, 8.5], [1, "Чт", 23.0, 8.5], [1, "Пт", 24.0, 8.5], [0, "Сб", 25.0, 0], [0, "Вс", 26.0, 0], [1, "Пн", 27.0, 8.5], [1, "Вт", 28.0, 8.5], [1, "Ср", 29.0, 8.5], [1, "Чт", 30.0, 8.5], [1, "Пт", 31.0, 8.5]], "5": [[0, "Сб", 1.0, 0], [0, "Вс", 2.0, 0], [1, "Пн", 3.0, 8.5], [1, "Вт", 4.0, 8.5], [1, "Ср", 5.0, 8.5], [1, "Чт", 6.0, 8.5], [1, "Пт", 7.0, 8.5], [0, "Сб", 8.0, 0], [0, "Вс", 9.0, 0], [1, "Пн", 10.0, 8.5], [1, "Вт", 11.0, 8.5], [0, "Ср", 12.0, 0], [1, "Чт", 13.0, 8.5], [1, "Пт", 14.0, 8.5], [0, "Сб", 15.0, 0], [0, "Вс", 16.0, 0], [1, "Пн", 17.0, 8.5], [1, "Вт", 18.0, 8.5], [1, "Ср", 19.0, 8.5], [1, "Чт", 20.0, 8.5], [1, "Пт", 21.0, 8.5], [0, "Сб", 22.0, 0], [0, "Вс", 23.0, 0], [1, "Пн", 24.0, 8.5], [1, "Вт", 25.0, 8.5], [1, "Ср", 26.0, 8.5], [1, "Чт", 27.0, 8.5], [1, "Пт", 28.0, 8.5], [0, "Сб", 29.0, 0], [0, "Вс", 30.0, 0]], "6": [[1, "Пн", 1.0, 8.5], [1, "Вт", 2.0, 8.5], [1, "Ср", 3.0, 8.5], [1, "Чт", 4.0, 8.5], [1, "Пт", 5.0, 8.5], [0, "Сб", 6.0, 0], [0, "Вс", 7.0, 0], [1, "Пн", 8.0, 8.5], [1, "Вт", 9.0, 8.5], [1, "Ср", 10.0, 8.5], [1, "Чт", 11.0, 8.5], [1, "Пт", 12.0, 8.5], [0, "Сб", 13.0, 0], [0, "Вс", 14.0, 0], [1, "Пн", 15.0, 8.5], [1, "Вт", 16.0, 8.5], [1, "Ср", 17.0, 8.5], [1, "Чт", 18.0, 8.5], [1, "Пт", 19.0, 8.5], [0, "Сб", 20.0, 0], [0, "Вс", 21.0, 0], [1, "Пн", 22.0, 8.5], [1, "Вт", 23.0, 8.5], [1, "Ср", 24.0, 8.5], [1, "Чт", 25.0, 8.5], [1, "Пт", 26.0, 8.5], [0, "Сб", 27.0, 0], [0, "Вс", 28.0, 0], [1, "Пн", 29.0, 8.5], [1, "Вт", 30.0, 8.5], [1, "Ср", 31.0, 8.5]], "7": [[1, "Чт", 1.0, 8.5], [1, "Пт", 2.0, 8.5], [0, "Сб", 3.0, 0], [0, "Вс", 4.0, 0], [1, "Пн", 5.0, 8.5], [1, "Вт", 6.0, 8.5], [1, "Ср", 7.0, 8.5], [1, "Чт", 8.0, 8.5], [1, "Пт", 9.0, 8.5], [0, "Сб", 10.0, 0], [0, "Вс", 11.0, 0], [1, "Пн", 12.0, 8.5], [1, "Вт", 13.0, 8.5], [1, "Ср", 14.0, 8.5], [1, "Чт", 15.0, 8.5], [1, "Пт", 16.0, 8.5], [0, "Сб", 17.0, 0], [0, "Вс", 18.0, 0], [1, "Пн", 19.0, 8.5], [1, "Вт", 20.0, 8.5], [1, "Ср", 21.0, 8.5], [1, "Чт", 22.0, 8.5], [1, "Пт", 23.0, 8.5], [0, "Сб", 24.0, 0], [0, "Вс", 25.0, 0], [1, "Пн", 26.0, 8.5], [1, "Вт", 27.0, 8.5], [1, "Ср", 28.0, 8.5], [1, "Чт", 29.0, 8.5], [1, "Пт", 30.0, 8.5], [0, "Сб", 31.0, 0]], "8": [[0, "Вс", 1.0, 0], [1, "Пн", 2.0, 8.5], [1, "Вт", 3.0, 8.5], [1, "Ср", 4.0, 8.5], [1, "Чт", 5.0, 8.5], [1, "Пт", 6.0, 8.5], [0, "Сб", 7.0, 0], [0, "Вс", 8.0, 0], [1, "Пн", 9.0, 8.5], [1, "Вт", 10.0, 8.5], [1, "Ср", 11.0, 8.5], [1, "Чт", 12.0, 8.5], [1, "Пт", 13.0, 8.5], [0, "Сб", 14.0, 0], [0, "Вс", 15.0, 0], [1, "Пн", 16.0, 8.5], [1, "Вт", 17.0, 8.5], [1, "Ср", 18.0, 8.5], [1, "Чт", 19.0, 8.5], [1, "Пт", 20.0, 8.5], [0, "Сб", 21.0, 0], [0, "Вс", 22.0, 0], [1, "Пн", 23.0, 8.5], [1, "Вт", 24.0, 8.5], [1, "Ср", 25.0, 8.5], [1, "Чт", 26.0, 8.5], [1, "Пт", 27.0, 8.5], [0, "Сб", 28.0, 0], [0, "Вс", 29.0, 0], [1, "Пн", 30.0, 8.5]], "9": [[1, "Вт", 1.0, 8.5], [1, "Ср", 2.0, 8.5], [1, "Чт", 3.0, 8.5], [1, "Пт", 4.0, 8.5], [0, "Сб", 5.0, 0], [0, "Вс", 6.0, 0], [1, "Пн", 7.0, 8.5], [1, "Вт", 8.0, 8.5], [1, "Ср", 9.0, 8.5], [1, "Чт", 10.0, 8.5], [1, "Пт", 11.0, 8.5], [0, "Сб", 12.0, 0], [0, "Вс", 13.0, 0], [1, "Пн", 14.0, 8.5], [1, "Вт", 15.0, 8.5], [1, "Ср", 16.0, 8.5], [1, "Чт", 17.0, 8.5], [1, "Пт", 18.0, 8.5], [0, "Сб", 19.0, 0], [0, "Вс", 20.0, 0], [1, "Пн", 21.0, 8.5], [1, "Вт", 22.0, 8.5], [1, "Ср", 23.0, 8.5], [1, "Чт", 24.0, 8.5], [1, "Пт", 25.0, 8.5], [0, "Сб", 26.0, 0], [0, "Вс", 27.0, 0], [1, "Пн", 28.0, 8.5], [1, "Вт", 29.0, 8.5], [1, "Ср", 30.0, 8.5], [1, "Чт", 31.0, 8.5]], "10": [[1, "Пт", 1.0, 8.5], [1, "Сб", 2.0, 8.5], [0, "Вс", 3.0, 0], [0, "Пн", 4.0, 0], [1, "Вт", 5.0, 8.5], [1, "Ср", 6.0, 8.5], [1, "Чт", 7.0, 8.5], [1, "Пт", 8.0, 8.5], [0, "Сб", 9.0, 0], [0, "Вс", 10.0, 0], [1, "Пн", 11.0, 8.5], [1, "Вт", 12.0, 8.5], [1, "Ср", 13.0, 8.5], [1, "Чт", 14.0, 8.5], [1, "Пт", 15.0, 8.5], [0, "Сб", 16.0, 0], [0, "Вс", 17.0, 0], [1, "Пн", 18.0, 8.5], [1, "Вт", 19.0, 8.5], [1, "Ср", 20.0, 8.5], [1, "Чт", 21.0, 8.5], [1, "Пт", 22.0, 8.5], [0, "Сб", 23.0, 0], [0, "Вс", 24.0, 0], [1, "Пн", 25.0, 8.5], [1, "Вт", 26.0, 8.5], [1, "Ср", 28.0, 8.5], [1, "Чт", 29.0, 8.5], [1, "Пт", 29.0, 8.5], [0, "Сб", 30.0, 0]], "11": [[0, "Вс", 1.0, 0], [1, "Пн", 2.0, 8.5], [1, "Вт", 3.0, 8.5], [1, "Ср", 4.0, 8.5], [1, "Чт", 5.0, 8.5], [1, "Пт", 6.0, 8.5], [0, "Сб", 7.0, 0], [0, "Вс", 8.0, 0], [1, "Пн", 9.0, 8.5], [1, "Вт", 10.0, 8.5], [1, "Ср", 11.0, 8.5], [1, "Чт", 12.0, 8.5], [1, "Пт", 13.0, 8.5], [0, "Сб", 14.0, 0], [0, "Вс", 15.0, 0], [1, "Пн", 16.0, 8.5], [1, "Вт", 17.0, 8.5], [1, "Ср", 18.0, 8.5], [1, "Чт", 19.0, 8.5], [1, "Пт", 20.0, 8.5], [0, "Сб", 21.0, 0], [0, "Вс", 22.0, 0], [1, "Пн", 23.0, 8.5], [1, "Вт", 24.0, 8.5], [1, "Ср", 25.0, 8.5], [1, "Чт", 26.0, 8.5], [1, "Пт", 27.0, 8.5], [1, "Сб", 28.0, 8.5], [0, "Вс", 29.0, 0], [0, "Пн", 30.0, 0], [0, "Вт", 31.0, 0]]}
let data = (new Date().getFullYear() === 2023) ? production_calendar_2023: production_calendar_2024
setInterval(main, 1000)
